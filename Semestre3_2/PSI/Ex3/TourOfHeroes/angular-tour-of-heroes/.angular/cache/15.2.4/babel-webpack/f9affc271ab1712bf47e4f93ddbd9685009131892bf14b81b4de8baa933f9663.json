{"ast":null,"code":"import { of } from 'rxjs';\nimport { HEROES } from './mock-heroes';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./message.service\";\nexport class HeroService {\n  constructor(messageService) {\n    this.messageService = messageService;\n  }\n  getHeroes() {\n    const heroes = of(HEROES);\n    this.messageService.add('HeroService: fetched heroes');\n    return heroes;\n  }\n  getHero(id) {\n    const hero = HEROES.find(h => h.id === id);\n    this.messageService.add(`HeroService: fetched hero id=${id}`);\n    return of(hero);\n  }\n}\nHeroService.ɵfac = function HeroService_Factory(t) {\n  return new (t || HeroService)(i0.ɵɵinject(i1.MessageService));\n};\nHeroService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HeroService,\n  factory: HeroService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAqBA,EAAE,QAAQ,MAAM;AAGrC,SAASC,MAAM,QAAQ,eAAe;;;AAMtC,OAAM,MAAOC,WAAW;EACtBC,YAAoBC,cAA8B;IAA9B,mBAAc,GAAdA,cAAc;EAAoB;EAEtDC,SAAS;IACP,MAAMC,MAAM,GAAGN,EAAE,CAACC,MAAM,CAAC;IACzB,IAAI,CAACG,cAAc,CAACG,GAAG,CAAC,6BAA6B,CAAC;IACtD,OAAOD,MAAM;EACf;EAEAE,OAAO,CAACC,EAAU;IAChB,MAAMC,IAAI,GAAGT,MAAM,CAACU,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACH,EAAE,KAAKA,EAAE,CAAE;IAC3C,IAAI,CAACL,cAAc,CAACG,GAAG,CAAC,gCAAgCE,EAAE,EAAE,CAAC;IAC7D,OAAOT,EAAE,CAACU,IAAI,CAAC;EACjB;;AAbWR,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAW,SAAXX,WAAW;EAAAY,YAFV;AAAM","names":["of","HEROES","HeroService","constructor","messageService","getHeroes","heroes","add","getHero","id","hero","find","h","factory","providedIn"],"sourceRoot":"","sources":["/home/hydrum/Documents/PSI/Ex3/TourOfHeroes/angular-tour-of-heroes/src/app/hero.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nimport { Hero } from './hero';\nimport { HEROES } from './mock-heroes';\nimport { MessageService } from './message.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HeroService {\n  constructor(private messageService: MessageService) { }\n\n  getHeroes(): Observable<Hero[]> {\n    const heroes = of(HEROES);\n    this.messageService.add('HeroService: fetched heroes');\n    return heroes;\n  }\n\n  getHero(id: number): Observable<Hero> {\n    const hero = HEROES.find(h => h.id === id)!;\n    this.messageService.add(`HeroService: fetched hero id=${id}`);\n    return of(hero);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}