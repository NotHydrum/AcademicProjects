{"ast":null,"code":"import { of } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { HEROES } from './mock-heroes';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\nexport class HeroService {\n  constructor(http, messageService) {\n    this.http = http;\n    this.messageService = messageService;\n    this.heroesUrl = 'api/heroes';\n  }\n  log(message) {\n    this.messageService.add(`HeroService: ${message}`);\n  }\n  getHeroes() {\n    return this.http.get(this.heroesUrl).pipe(tap(_ => this.log('fetched heroes')), catchError(this.handleError('getHeroes', [])));\n  }\n  getHero(id) {\n    const hero = HEROES.find(h => h.id === id);\n    this.messageService.add(`HeroService: fetched hero id=${id}`);\n    return of(hero);\n  }\n  handleError(operation = 'operation', result) {\n    return error => {\n      console.error(error);\n      this.log(`${operation} failed: ${error.message}`);\n      return of(result);\n    };\n  }\n}\nHeroService.ɵfac = function HeroService_Factory(t) {\n  return new (t || HeroService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService));\n};\nHeroService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HeroService,\n  factory: HeroService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAqBA,EAAE,QAAQ,MAAM;AACrC,SAASC,UAAU,EAAOC,GAAG,QAAQ,gBAAgB;AAIrD,SAASC,MAAM,QAAQ,eAAe;;;;AAMtC,OAAM,MAAOC,WAAW;EAGtBC,YACUC,IAAgB,EAChBC,cAA8B;IAD9B,SAAI,GAAJD,IAAI;IACJ,mBAAc,GAAdC,cAAc;IAJhB,cAAS,GAAG,YAAY;EAK5B;EAEIC,GAAG,CAACC,OAAe;IACzB,IAAI,CAACF,cAAc,CAACG,GAAG,CAAC,gBAAgBD,OAAO,EAAE,CAAC;EACpD;EAEAE,SAAS;IACP,OAAO,IAAI,CAACL,IAAI,CAACM,GAAG,CAAS,IAAI,CAACC,SAAS,CAAC,CACzCC,IAAI,CAACZ,GAAG,CAACa,CAAC,IAAI,IAAI,CAACP,GAAG,CAAC,gBAAgB,CAAC,CAAC,EACxCP,UAAU,CAAC,IAAI,CAACe,WAAW,CAAS,WAAW,EAAE,EAAE,CAAC,CAAC,CACtD;EACL;EAEAC,OAAO,CAACC,EAAU;IAChB,MAAMC,IAAI,GAAGhB,MAAM,CAACiB,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACH,EAAE,KAAKA,EAAE,CAAE;IAC3C,IAAI,CAACX,cAAc,CAACG,GAAG,CAAC,gCAAgCQ,EAAE,EAAE,CAAC;IAC7D,OAAOlB,EAAE,CAACmB,IAAI,CAAC;EACjB;EAEQH,WAAW,CAAIM,SAAS,GAAG,WAAW,EAAEC,MAAU;IACxD,OAAQC,KAAU,IAAmB;MACnCC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACpB,IAAI,CAAChB,GAAG,CAAC,GAAGc,SAAS,YAAYE,KAAK,CAACf,OAAO,EAAE,CAAC;MACjD,OAAOT,EAAE,CAACuB,MAAW,CAAC;IACxB,CAAC;EACH;;AA/BWnB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAsB,SAAXtB,WAAW;EAAAuB,YAFV;AAAM","names":["of","catchError","tap","HEROES","HeroService","constructor","http","messageService","log","message","add","getHeroes","get","heroesUrl","pipe","_","handleError","getHero","id","hero","find","h","operation","result","error","console","factory","providedIn"],"sourceRoot":"","sources":["/home/hydrum/Documents/PSI/Ex3/TourOfHeroes/angular-tour-of-heroes/src/app/hero.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { Hero } from './hero';\nimport { HEROES } from './mock-heroes';\nimport { MessageService } from './message.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HeroService {\n  private heroesUrl = 'api/heroes';\n\n  constructor(\n    private http: HttpClient,\n    private messageService: MessageService\n  ) { }\n\n  private log(message: string) {\n    this.messageService.add(`HeroService: ${message}`);\n  }\n\n  getHeroes(): Observable<Hero[]> {\n    return this.http.get<Hero[]>(this.heroesUrl)\n      .pipe(tap(_ => this.log('fetched heroes')),\n        catchError(this.handleError<Hero[]>('getHeroes', []))\n      );\n  }\n\n  getHero(id: number): Observable<Hero> {\n    const hero = HEROES.find(h => h.id === id)!;\n    this.messageService.add(`HeroService: fetched hero id=${id}`);\n    return of(hero);\n  }\n\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n      console.error(error);\n      this.log(`${operation} failed: ${error.message}`);\n      return of(result as T);\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}